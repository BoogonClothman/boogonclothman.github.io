{"version":3,"file":"js/750.b7e1a12c.js","mappings":"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","sources":["webpack://official-website/../src/defaults.ts","webpack://official-website/../src/helpers.ts","webpack://official-website/../src/Tokenizer.ts","webpack://official-website/../src/rules.ts","webpack://official-website/../src/Lexer.ts","webpack://official-website/../src/Renderer.ts","webpack://official-website/../src/TextRenderer.ts","webpack://official-website/../src/Parser.ts","webpack://official-website/../src/Hooks.ts","webpack://official-website/../src/Instance.ts","webpack://official-website/../src/marked.ts"],"sourcesContent":["/**\n * Gets the original marked default options.\n */\nexport function _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nexport let _defaults = _getDefaults();\nexport function changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n","/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nexport function escape(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nexport function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nexport function edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nexport function cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nexport const noopTest = { exec: () => null };\nexport function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nexport function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport { rtrim, splitCells, escape, findClosingBracket } from './helpers.ts';\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n')\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (/^ {0,3}>/.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1')\n                    .replace(/^ {0,3}>[ \\t]?/gm, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens[tokens.length - 1];\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens[tokens.length - 1].raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = list.items[list.items.length - 1].raw.trimEnd();\n            list.items[list.items.length - 1].text = list.items[list.items.length - 1].text.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i]\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i]\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n","import { edit, noopTest } from './helpers.ts';\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nexport const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nexport const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { block, inline } from './rules.ts';\n/**\n * Block Lexer\n */\nexport class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { cleanUrl, escape } from './helpers.ts';\n/**\n * Renderer\n */\nexport class _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(/^\\S*/)?.[0];\n        const code = text.replace(/\\n$/, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' '\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${text}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : token.text;\n    }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body }]\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n","import { _defaults } from './defaults.ts';\nexport class _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape, unescape } from './helpers.ts';\nexport class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    let rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        if (!pack.useNewRenderer) {\n                            // TODO: Remove this in next major version\n                            rendererFunc = this.#convertRendererFunction(rendererFunc, rendererProp, renderer);\n                        }\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    // TODO: Remove this in next major release\n    #convertRendererFunction(func, prop, renderer) {\n        switch (prop) {\n            case 'heading':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, renderer.parser.parseInline(token.tokens), token.depth, unescape(renderer.parser.parseInline(token.tokens, renderer.parser.textRenderer)));\n                };\n            case 'code':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text, token.lang, !!token.escaped);\n                };\n            case 'table':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < token.header.length; j++) {\n                        cell += this.tablecell({\n                            text: token.header[j].text,\n                            tokens: token.header[j].tokens,\n                            header: true,\n                            align: token.align[j]\n                        });\n                    }\n                    header += this.tablerow({ text: cell });\n                    let body = '';\n                    for (let j = 0; j < token.rows.length; j++) {\n                        const row = token.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.tablecell({\n                                text: row[k].text,\n                                tokens: row[k].tokens,\n                                header: false,\n                                align: token.align[k]\n                            });\n                        }\n                        body += this.tablerow({ text: cell });\n                    }\n                    return func.call(this, header, body);\n                };\n            case 'blockquote':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    const body = this.parser.parse(token.tokens);\n                    return func.call(this, body);\n                };\n            case 'list':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    const ordered = token.ordered;\n                    const start = token.start;\n                    const loose = token.loose;\n                    let body = '';\n                    for (let j = 0; j < token.items.length; j++) {\n                        const item = token.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.checkbox({ checked: !!checked });\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parser.parse(item.tokens, loose);\n                        body += this.listitem({\n                            type: 'list_item',\n                            raw: itemBody,\n                            text: itemBody,\n                            task,\n                            checked: !!checked,\n                            loose,\n                            tokens: item.tokens\n                        });\n                    }\n                    return func.call(this, body, ordered, start);\n                };\n            case 'html':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text, token.block);\n                };\n            case 'paragraph':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'escape':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            case 'link':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.href, token.title, this.parser.parseInline(token.tokens));\n                };\n            case 'image':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.href, token.title, token.text);\n                };\n            case 'strong':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'em':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'codespan':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            case 'del':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'text':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            default:\n            // do nothing\n        }\n        return func;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport { _getDefaults, changeDefaults, _defaults } from './defaults.ts';\nconst markedInstance = new Marked();\nexport function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\n"],"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","valSource","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","indexOf","level","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","rules","constructor","this","space","src","block","newline","code","codeBlockStyle","fences","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","list","bull","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","blankLine","indent","trimStart","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","ischecked","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","headers","aligns","rows","item","header","align","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","linkString","emStrong","maskedSrc","prevChar","emStrongLDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","blockCode","bullet","_paragraph","blockText","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","inlineCode","_punctuation","blockSkip","_inlineComment","_inlineLabel","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastParagraphClipped","cutSrc","leading","tabs","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","parser","langString","body","parse","parseInline","j","listitem","startAttr","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","anyToken","renderers","genericToken","ret","textToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","_Marked_brand","WeakSet","Marked","args","_classPrivateMethodInitSpec","_defineProperty","setOptions","_assertClassBrand","_parseMarkdown","use","callback","values","concat","tableToken","listToken","defaults","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","useNewRenderer","_convertRendererFunction","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","func","arguments","origOpt","warn","throwError","_onError","prototype","toString","all","catch","message","msg","reject","markedInstance","marked","getDefaults","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks"],"sourceRoot":""}